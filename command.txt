//添加文件
git add

//提交文件
git commit -m ""

//查看当前状态
git status

//查看版本差异
git diff file.txt

//回退前一个版本
git reset --hard HEAD^

//回退指定版本
git reset --hard afa324324

//查看历史记录，以便确定要回退到哪个版本。退出log快捷键"q"
git log 

//查看命令历史，以便确定要回到未来的哪个版本。
git reflog

//查看文本
cat file.txt

//场景1，当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时,就是让这个文件回到最近一次git commit或git add时的状态。
git checkout -- file

//当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD <file>，就回到了场景1，第二步按场景1操作。
git reset HEAD <file>

//远程连接，把本地仓库的内容推送到GitHub仓库
$ git remote add origin https://github.com/Aixia0/resp1.git

//第一次推送master分支的所有内容；
$ git push -u origin master

//此后，每次本地提交后，只要有必要，就可以使用命令推送最新修改
$git push origin master

//要克隆一个仓库，首先必须知道仓库的地址，然后使用命令克隆。
$git clone

/a/Git支持多种协议，包括https，但通过ssh支持的原生git协议速度最快。


//创建dev，然后切换到dev分支
$ git checkout -b dev

Git鼓励大量使用分支：

//查看分支：
$git branch

//创建分支：
$git branch <name>

//切换分支：
$git checkout <name>

//创建+切换分支：
$git checkout -b <name>

//合并某分支到当前分支：
$git merge <name>

//删除分支：
$git branch -d <name>

//当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。

解决冲突就是把Git合并失败的文件手动编辑为我们希望的内容，再提交。

//进入vim编辑器，"a"插入操作，"ESC"取消操作，"ZZ"退出vim
vi file

//准备合并dev分支，请注意--no-ff参数，表示禁用Fast forward：
(因为本次合并要创建一个新的commit，所以加上-m参数，把commit描述写进去。)
$ git merge --no-ff -m "merge with no-ff" dev

//查看历史分支
$ git log --graph --pretty=oneline --abbrev-commit

//合并分支时，加上--no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而fast forward合并就看不出来曾经做过合并。

//当手头工作没有完成时，先把工作现场git stash一下
$it stash
//然后去修复bug，修复后，再git stash pop，回到工作现场，修复并删除
$git stash pop

//恢复，但是恢复后，stash内容并不删除；
$git stash apply

//删除
$git stash drop

//查看存在的stash
$git stash list